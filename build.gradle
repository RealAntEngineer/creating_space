buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
    }
    dependencies {
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = '1.7.1.test_rocket_4'
group = 'com.rae.creatingspace' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'creatingspace'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.19.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=creatingspace.mixins.json'


            property 'forge.enabledGameTestNamespaces', archivesBaseName

		    property 'mixin.env.remapRefMap', 'true'
		    property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                creatingspace {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=creatingspace.mixins.json'

            property 'forge.enabledGameTestNamespaces',archivesBaseName

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                creatingspace {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            workingDirectory project.file('run')
            arg '-mixin.config=creatingspace.mixins.json'

            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                creatingspace {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg '-mixin.config=creatingspace.mixins.json'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'creatingspace', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                creatingspace {
                    source sourceSets.main
                }
            }
        }
    }
}
// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	//create
	maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'

    }

	//JEI
	//maven {
    	//	name = "Progwml6's maven"
    	//	url = "https://dvs1.progwml6.com/files/maven/"
  	//}
  	maven {
    		
    		name = "Jared's maven"
    		url = "https://maven.blamejared.com/"
  	}
  	maven {
    		// location of a maven mirror for JEI files, as a fallback
    		name = "ModMaven"
    		url = "https://modmaven.dev"
  	}

	//curios
	maven {
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.8'

	// modApi "mezz.jei:jei-1.19.2:11.6.0.1015" ?
    //create
	implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")


	//JEI
	// compile against the JEI API but do not include it at runtime
  	compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
  	compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
  	// at runtime, use the full JEI jar for Forge
  	runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

	//curios

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}")

    //if (!Boolean.getBoolean('idea.sync.active')) {
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    //}
}

mixin {
    add sourceSets.main, 'creatingspace.refmap.json'
    config 'creatingspace.mixins.json'

    //debug.verbose = true
    //debug.export = true
}
// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "creating space",
                "Specification-Vendor"    : "Real Ant Engineer",
                "Specification-Version": "1.7.1 test new rocket 4", // We are version 1.7.1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Real Ant Engineer",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'creatingspace.mixins.json'

        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {

        maven {
		
            url "file://${project.projectDir}/mcmodsrepo"
        }
		
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
